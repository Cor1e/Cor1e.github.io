<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>glibc的TLS实现中的相关结构体浅析</title>
      <link href="2021/05/07/tls/"/>
      <url>2021/05/07/tls/</url>
      
        <content type="html"><![CDATA[<h5 id="通过一个几行代码的示例来浅层地观察一下glibc的TLS实现中的结构体："><a href="#通过一个几行代码的示例来浅层地观察一下glibc的TLS实现中的结构体：" class="headerlink" title="通过一个几行代码的示例来浅层地观察一下glibc的TLS实现中的结构体："></a>通过一个几行代码的示例来浅层地观察一下glibc的TLS实现中的结构体：</h5><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> ntid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thr_fn</span><span class="params">(<span class="keyword">void</span> *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new thread:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    err = pthread_create(&amp;ntid,<span class="literal">NULL</span>,thr_fn,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(ntid,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main thread:\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="首先在main下断点，进入主线程："><a href="#首先在main下断点，进入主线程：" class="headerlink" title="首先在main下断点，进入主线程："></a>首先在main下断点，进入主线程：</h4><p><a href="https://imgtu.com/i/gGx5VJ" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gGx5VJ.png" alt="gGx5VJ.png"></a></p><p>在<code>X86</code>中<code>TLS</code>由<code>FS</code>寄存器(通常由运行时代码或线程库管理)指向，<code>TLS</code>在<code>glibc</code>中的实现为<code>tcbhead_t(TCB)</code>结构体，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;                <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                           thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;                <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;<span class="comment">//储存canary的值</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> feature_1;</span><br><span class="line">  <span class="keyword">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="keyword">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="keyword">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line">  <span class="keyword">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>查看主线程的<code>$fs_base</code>（在保护模式下<code>$fs</code>为空值，需查看每个线程的<code>$fs_base</code>）<code>=0x7ffff7d9f740</code></p><p><a href="https://imgtu.com/i/gGx0bQ" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gGx0bQ.png" alt="gGx0bQ.png"></a></p><p>动态链接器完成内存映射后将调用<code>init_tls</code>等一系列函数来初始化主线程的静态<code>TLS</code>和<code>DTV</code>，由上面<code>vmmap</code>的结果可知此时<code>TLS</code>结构体<code>(TCB)</code>被分配在<code>mmap</code>段。</p><p>其中<code>dtv</code>部分指向一个类型为<code>dtv_t</code>的数组的第二个元素，该结构体的定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> dtv &#123;</span><br><span class="line"><span class="keyword">size_t</span> counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span>* val;</span><br><span class="line"><span class="keyword">bool</span> is_static;</span><br><span class="line">&#125; pointer;</span><br><span class="line">&#125; <span class="keyword">dtv_t</span>;</span><br></pre></td></tr></table></figure><p><code>dtv</code>数组前两个元素具有特定功能，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dtv[<span class="number">0</span>].counter; <span class="comment">/* Pro tip: The length of this dtv array */</span></span><br><span class="line">dtv[<span class="number">1</span>].counter;  <span class="comment">/* Generation counter for the DTV in this thread */</span></span><br><span class="line">dtv[<span class="number">2</span>].pointer;  <span class="comment">/* Pointer to the main executable TLS block in this thread */</span></span><br></pre></td></tr></table></figure><p>查看主线程的<code>dtv</code>：</p><p><a href="https://imgtu.com/i/gGxYCt" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gGxYCt.png" alt="gGxYCt.png"></a></p><p>可见主线程<code>dtv</code>数组大小为<code>0xf</code>，<code>TLS</code>块的数量为1，第三个元素<code>0x7ffff7d9f6b0</code>指向<code>TLS</code>块<code>（0x7ffff7d9f740）-0x90</code>的位置</p><h4 id="接着在子线程的执行scanf前下了断点，进入子线程查看："><a href="#接着在子线程的执行scanf前下了断点，进入子线程查看：" class="headerlink" title="接着在子线程的执行scanf前下了断点，进入子线程查看："></a>接着在子线程的执行scanf前下了断点，进入子线程查看：</h4><p><a href="https://imgtu.com/i/gJSNnS" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gJSNnS.png" alt="gJSNnS.png"></a></p><p><a href="https://imgtu.com/i/gJSa7Q" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gJSa7Q.png" alt="gJSa7Q.png"></a></p><p>可以看出子线程的栈和<code>TCB</code>都被分配在<code>mmap</code>段（相关的知识我还不太懂，需要读<code>pthread_creat</code>源码），此处由<code>pthread_creat</code>源码中的<code>__pthread_create_2_1-&gt;allocate_stack-&gt;_dl_allocate_tls</code>函数知知子线程的<code>dtv</code>由<code>calloc</code>分配，如下图：</p><p><a href="https://imgtu.com/i/gJ9RY9" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gJ9RY9.png" alt="gJ9RY9.png"></a></p><p><a href="https://imgtu.com/i/gJ9hS1" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/08/gJ9hS1.png" alt="gJ9hS1.png"></a></p><p>大概了解到这里，后续再学习。</p><blockquote><p>参考文章：<a href="https://chao-tic.github.io/blog/2018/12/25/tls" target="_blank" rel="noopener">A Deep dive into (implicit) Thread Local Storage (chao-tic.github.io)</a>（写得很好，但是我英语不好很多读不太懂，推荐阅读）</p><p><a href="https://blog.csdn.net/conansonic/article/details/77487925" target="_blank" rel="noopener">pthread_create源码分析_conansonic的博客-CSDN博客</a></p><p><a href="https://code.woboq.org/userspace/glibc" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> glibc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glibc </tag>
            
            <tag> pthread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署在github上的hexo博客 1</title>
      <link href="2019/10/03/2/"/>
      <url>2019/10/03/2/</url>
      
        <content type="html"><![CDATA[<h2 id="为了让博客用起来稍微舒适一些，继续了如下操作。"><a href="#为了让博客用起来稍微舒适一些，继续了如下操作。" class="headerlink" title="为了让博客用起来稍微舒适一些，继续了如下操作。"></a>为了让博客用起来稍微舒适一些，继续了如下操作。</h2><h3 id="1-安装NexT主题"><a href="#1-安装NexT主题" class="headerlink" title="1.安装NexT主题"></a>1.安装NexT主题</h3><p>cd到博客目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后打开<strong>站点配置文件</strong><code>_config.yml</code>然后找到<code>theme</code>, 把<code>landscape</code> 改成 <code>next</code></p><p>(注意：对于yml文件, 每个属性名称冒号的后面一定是有一个空格的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next #注意 ‘:’ 后面是有空格的!</span><br></pre></td></tr></table></figure><h3 id="2-瞎搞NexT（读主题配置文件config-ym是重要的）"><a href="#2-瞎搞NexT（读主题配置文件config-ym是重要的）" class="headerlink" title="2.瞎搞NexT（读主题配置文件config.ym是重要的）"></a>2.瞎搞NexT（读<strong>主题配置文件</strong><code>config.ym</code>是重要的）</h3><h4 id="1-小小地设置一下外观"><a href="#1-小小地设置一下外观" class="headerlink" title="(1).小小地设置一下外观"></a>(1).小小地设置一下外观</h4><p><strong>主题配置文件</strong>找到<code>Scheme Settings</code>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>把你要用的主题去掉注释</p><h4 id="2-小小地设置一下菜单，为了能多出一个tags功能"><a href="#2-小小地设置一下菜单，为了能多出一个tags功能" class="headerlink" title="(2).小小地设置一下菜单，为了能多出一个tags功能"></a>(2).小小地设置一下菜单，为了能多出一个tags功能</h4><p><strong>主题配置文件</strong>找到<code>Menu Settings</code>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>把tags取消注释呗</p><p>新建一个页面，命名为tags，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>在myBlog/source下会新生成一个新的文件夹tags ，在该文件夹下会有一个index.md文件</p><p>编辑tags文件夹下的index.md</p><p><img src="https://i.loli.net/2019/10/03/WEfsz1SyIUL7Xvl.png" alt="批注 2019-10-03 102232.png"></p><p>然后就会多出tags功能了。</p><h4 id="3-搞出评论功能"><a href="#3-搞出评论功能" class="headerlink" title="(3).搞出评论功能"></a>(3).搞出评论功能</h4><p>来必力注册完后，依然是<strong>主题配置文件</strong></p><p><img src="https://i.loli.net/2019/10/03/9Oa5kETzMng7Khm.png" alt="103937.png"></p><h4 id="4-设置网站图标"><a href="#4-设置网站图标" class="headerlink" title="(4).设置网站图标"></a>(4).设置网站图标</h4><p>自己搞了俩<code>16*16</code> <code>32*32</code>的.ico</p><p>分别命名为<code>favicon16.ico``favicon32.ico</code></p><p>放在<code>/themes/next/source/images</code></p><p>修改<strong>主题配置文件</strong></p><p><img src="https://i.loli.net/2019/10/03/5DHPypgqrC49QFf.png" alt="104525.png"></p><p>就成了呗</p><p><img src="https://i.loli.net/2019/10/03/POwlsRqrjBtSCGI.png" alt="104947.png"></p><h2 id="每次修改完都要记得"><a href="#每次修改完都要记得" class="headerlink" title="每次修改完都要记得"></a>每次修改完都要记得</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="另外，这两个东西真好用"><a href="#另外，这两个东西真好用" class="headerlink" title="*另外，这两个东西真好用"></a>*另外，这两个东西真好用</h2><h3 id="1-Typora真是一个好用的Markdown编辑器！"><a href="#1-Typora真是一个好用的Markdown编辑器！" class="headerlink" title="1.Typora真是一个好用的Markdown编辑器！"></a>1.Typora真是一个好用的Markdown编辑器！</h3><h3 id="2-https-sm-ms-真是好用的图床！"><a href="#2-https-sm-ms-真是好用的图床！" class="headerlink" title="2.https://sm.ms/真是好用的图床！"></a>2.<code>https://sm.ms/</code>真是好用的图床！</h3>]]></content>
      
      
      <categories>
          
          <category> 搭建静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建静态博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署在github上的hexo博客 0</title>
      <link href="2019/10/03/1/"/>
      <url>2019/10/03/1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-以下内容多为拾人牙慧所得，感谢Reverier大佬的帮助"><a href="#1-以下内容多为拾人牙慧所得，感谢Reverier大佬的帮助" class="headerlink" title="-1.以下内容多为拾人牙慧所得，感谢Reverier大佬的帮助"></a>-1.以下内容多为拾人牙慧所得，感谢Reverier大佬的帮助</h2><h2 id="0-前期准备"><a href="#0-前期准备" class="headerlink" title="0.前期准备"></a>0.前期准备</h2><h3 id="0-1-安装Git"><a href="#0-1-安装Git" class="headerlink" title="0.1.安装Git"></a>0.1.安装Git</h3><p>我用windows,因为到git官网下速度狠感人，搜索’git下载国内镜像地址’得到它。</p><p>下载安装完后就会有一个Git Bash命令行工具，以后用这个工具来使用git。(就可以不一定要用cmd了哦)</p><h3 id="0-2-安装nodeJS"><a href="#0-2-安装nodeJS" class="headerlink" title="0.2.安装nodeJS"></a>0.2.安装nodeJS</h3><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows:</p><p>选择LTS版本就行</p><p>安装完后打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查一下有没有安装成功</p><h3 id="0-3-安装hexo"><a href="#0-3-安装hexo" class="headerlink" title="0.3.安装hexo"></a>0.3.安装hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog（随便叫什么都行），然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>查看版本</p><p>安装完毕</p><p>接下来初始化一下hexo</p><p>cd到你创建的blog文件夹下</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>（吧啦吧啦</p><p>然后（后续操作都要在你创建的blog文件夹下完成哦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(用hexo g命令也行)</span><br><span class="line">hexo server(用hexo s命令也行)</span><br></pre></td></tr></table></figure><p>现在我们打开了hexo的服务，在浏览器输入localhost:4000就可以看到差不多如下页面</p><p><img src="https://i.loli.net/2019/10/03/RPYWcadi3s2NErw.jpg" alt="hd.jpg"></p><h3 id="0-4-GitHub创建仓库"><a href="#0-4-GitHub创建仓库" class="headerlink" title="0.4.GitHub创建仓库"></a>0.4.GitHub创建仓库</h3><p>创建一个和你用户名相同的仓库，后面加.<a href="https://link.zhihu.com/?target=http%3A//github.io" target="_blank" rel="noopener">http://github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="https://i.loli.net/2019/10/03/n7WqwAlditRP5zB.png" alt="051617.png"></p><p>点击create repository。</p><h3 id="0-5-生成SSH添加到GitHub"><a href="#0-5-生成SSH添加到GitHub" class="headerlink" title="0.5. 生成SSH添加到GitHub"></a>0.5. 生成SSH添加到GitHub</h3><p>回到你的git bash中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code> 把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="https://i.loli.net/2019/10/03/p57JnVYlsiAK2Dz.png" alt="054558.png"></p><p>在gitbash中，查看是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="0-6-将hexo部署到GitHub"><a href="#0-6-将hexo部署到GitHub" class="headerlink" title="0.6.将hexo部署到GitHub"></a>0.6.将hexo部署到GitHub</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为 YourgithubName就是你的GitHub账户（我的githubName即为Cor1e)</p><p><img src="https://i.loli.net/2019/10/03/batLEHplsqh1xvw.png" alt="052421.png"></p><p>也别忘了改url（这其实显然是。。。买完域名之后的操作。随便啦先讲了也行⑧）</p><p><img src="https://i.loli.net/2019/10/03/3rT74vAemlxUQsK.png" alt="052313.png"></p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><code>hexo generate</code>生成静态文章，可以用 <code>hexo g</code>缩写 <code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！ </p><h3 id="0-7-设置个人域名"><a href="#0-7-设置个人域名" class="headerlink" title="0.7. 设置个人域名"></a>0.7. 设置个人域名</h3><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在<a href="https://link.zhihu.com/?target=https%3A//wanwang.aliyun.com/%3Fspm%3D5176.8142029.digitalization.2.e9396d3e46JCc5" target="_blank" rel="noopener">阿里云</a>上买一个域名，我买的是 cor1e.cn</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><p><img src="https://i.loli.net/2019/10/03/bzfh37VSJojqd1c.png" alt="053059.png"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名cor1e.cn</p><p><img src="https://i.loli.net/2019/10/03/lhutFHqR9xVQACY.png" alt="053311.png"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://i.loli.net/2019/10/03/4FYb5URwLohPfQA.png" alt="053459.png"></p><p>最后，在gitbash中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">这两行命令可以用</span><br><span class="line">hexo g -d</span><br><span class="line">替代哦</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><p>要创建新的博文，请cd到你创建的blog文件夹的source\ _posts文件夹下</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername（newpapername是你想创建的markdown文件名）</span><br></pre></td></tr></table></figure><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="前期准备到这就差不多做好了，后面写如何个性化博客界面"><a href="#前期准备到这就差不多做好了，后面写如何个性化博客界面" class="headerlink" title="前期准备到这就差不多做好了，后面写如何个性化博客界面"></a>前期准备到这就差不多做好了，后面写如何个性化博客界面</h2>]]></content>
      
      
      <categories>
          
          <category> 搭建静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建静态博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<p>–企鹅饲养员<br>QQ: 2096691198</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>读书</title>
      <link href="reading/index.html"/>
      <url>reading/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
